{"mappings":";;;;;;;;;;;;;;;AEKA,MAAM,gCAA2B,EAAE;AACnC,IAAI,qCAAuB;AAE3B,MAAM,iCAAW,OAAO;IACtB,MAAM,UAAU,MAAM;IACtB,MAAM,OAAO,MAAM,QAAQ,OAAO;IAElC,MAAM,KAAK,WAAW,CAAC;QACrB,OAAO;QACP,QAAQ;IACV;IAEA,IAAI;QACF,MAAM,KAAK,IAAI,CACb,CAAC;;sBAEe,EAAE,KAAK,WAAW,CAAC;wBACjB,EAAE,KAAK,aAAa,CAAC;sBACvB,EAAE,KAAK,cAAc,CAAC;qBACvB,EAAE,KAAK,OAAO,EAAE,EAC/B;YACE,WAAW;YACX,SAAS;QACX;QAGF,MAAM,KAAK,eAAe,CAAC;QAE3B,MAAM,cAAc,MAAM,KAAK,OAAO;QAEtC,IAAI,aAAa;YACf,MAAM,IAAI,oBAAa;YACvB,MAAM,OAAiB,EAAE;YAEzB,EAAE,SACC,IAAI,CAAC,cACL,IAAI,CAAC,CAAC,GAAG;gBACR,EAAE,IACC,IAAI,CAAC,QACL,IAAI,CAAC,CAAC,GAAG;oBACR,MAAM,QAAQ,EAAE,IAAI,IAAI;oBACxB,KAAK,IAAI,CAAC,MAAM,OAAO,CAAC,KAAK;gBAC/B;YACJ;YAEF,IAAI,KAAK,MAAM,GAAG,GAAG;gBACnB,MAAM,UAAU,CAAA,GAAA,mBAAI,EAAE,MAAM;gBAE5B,QAAQ,OAAO,CAAC,CAAC;oBACf,8BAAQ,IAAI,CAAC;wBACX,UAAU,KAAK,CAAC,EAAE;wBAClB,UAAU,KAAK,CAAC,EAAE;wBAClB,aAAa,KAAK,CAAC,EAAE;wBACrB,YAAY,KAAK,CAAC,EAAE;oBACtB;gBACF;YACF,OAAO,QAAQ,GAAG,CAAC;QACrB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC;IACd;IAEA,MAAM,QAAQ,KAAK;AACrB;IAEA,2CAAe,OAAO;IACpB,MAAM,+BAAS;IAEf,KAAK,MAAM,MAAM,8BACf,sCAAgB,WAAW,GAAG,WAAW;IAG3C,MAAM,iBAAiB,qCAAe,8BAAQ,MAAM;IAEpD,qCAAe;IAEf,OAAO,KAAK,KAAK,CAAC,iBAAiB,OAAO;AAC5C;;;;;;;AF7EA,MAAM,qCAAe,CAAA,GAAA,qCAAG,EAAE,IAAI,CAAC,yCAAW;AAE1C,MAAM,qCAAe;IACnB,MAAM,MAAM,IAAI,CAAA,GAAA,6BAAY,EAAE;QAC5B,OAAO;QACP,QAAQ;QACR,gBAAgB;YACd,SAAS,qCAAe;QAC1B;IACF;IAEA,IAAI,QAAQ,CAAC,qCAAe;AAC9B;AAEA,CAAA,GAAA,mBAAE,EAAE,SAAS,GAAG,IAAI,CAAC;IACnB;IAEA,CAAA,GAAA,mBAAE,EAAE,EAAE,CAAC,YAAY;QACjB,IAAI,CAAA,GAAA,6BAAY,EAAE,aAAa,GAAG,MAAM,KAAK,GAC3C;IAEJ;AACF;AAEA,CAAA,GAAA,uBAAM,EAAE,MAAM,CAAC,YAAY,OAAO,OAAO;IACvC,QAAQ,GAAG,CAAC;IAEZ,MAAM,MAAM,MAAM,CAAA,GAAA,wCAAO,EAAE;IAE3B,OAAO;AACT;AAEA,CAAA,GAAA,mBAAE,EAAE,EAAE,CAAC,qBAAqB;IAC1B,IAAI,QAAQ,QAAQ,KAAK,UACvB,CAAA,GAAA,mBAAE,EAAE,IAAI;AAEZ","sources":["src/main.ts","src/functions/index.ts","src/functions/bcb-scrap.ts"],"sourcesContent":["import { app, BrowserWindow, ipcMain } from 'electron';\nimport path from 'path';\nimport { bcbScrap } from './functions';\nimport { IArguments } from './types';\n\nconst electronPath = path.join(__dirname, '../electron/');\n\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 1280,\n    height: 720,\n    webPreferences: {\n      preload: electronPath + 'preload.js',\n    },\n  });\n\n  win.loadFile(electronPath + 'static/index.html');\n};\n\napp.whenReady().then(() => {\n  createWindow();\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow();\n    }\n  });\n});\n\nipcMain.handle('fetchBCB', async (event, data: IArguments) => {\n  console.log(data);\n\n  const req = await bcbScrap(data);\n\n  return req;\n});\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n","import bcbScrap from './bcb-scrap';\n\nexport { bcbScrap };\n","import * as puppeteer from 'puppeteer';\nimport * as cheerio from 'cheerio';\nimport { chunk } from 'lodash';\nimport { GenericObject, IArguments } from '../types';\n\nconst resJson: GenericObject[] = [];\nlet totalMonthly: number = 0;\n\nconst scrapBCB = async (data: IArguments) => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n\n  await page.setViewport({\n    width: 1920,\n    height: 1080,\n  });\n\n  try {\n    await page.goto(\n      `https://www.bcb.gov.br/estatisticas/reporttxjuroshistorico/?\n    // historicotaxajurosdiario_page=1&\n    // codigoSegmento=${data.codSegmento}&\n    // codigoModalidade=${data.codModalidade}&\n    // tipoModalidade=${data.tipoModalidade}&\n    // InicioPeriodo=${data.periodo}`,\n      {\n        waitUntil: 'networkidle2',\n        timeout: 10000,\n      }\n    );\n\n    await page.waitForSelector('table.table');\n\n    const htmlContent = await page.content();\n\n    if (htmlContent) {\n      const $ = cheerio.load(htmlContent);\n      const list: string[] = [];\n\n      $('table')\n        .find('tbody > tr')\n        .each((i, tr) => {\n          $(tr)\n            .find('> td')\n            .each((j, td) => {\n              const value = $(td).text();\n              list.push(value.replace(' ', ''));\n            });\n        });\n\n      if (list.length > 0) {\n        const chunked = chunk(list, 4);\n\n        chunked.forEach((chunk) => {\n          resJson.push({\n            position: chunk[0],\n            bankName: chunk[1],\n            monthlyRate: chunk[2],\n            annualRate: chunk[3],\n          });\n        });\n      } else console.log('Falha ao buscar os dados, tente novamente.');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n\n  await browser.close();\n};\n\nexport default async (data: IArguments): Promise<number> => {\n  await scrapBCB(data);\n\n  for (const el of resJson) {\n    totalMonthly += parseFloat(el.monthlyRate);\n  }\n\n  const monthlyAverage = totalMonthly / resJson.length;\n\n  totalMonthly = 0;\n\n  return Math.floor(monthlyAverage * 100) / 100;\n};\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../"}