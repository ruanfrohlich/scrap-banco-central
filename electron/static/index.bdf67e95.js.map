{"mappings":"ACOA,MAAM,EAAI,OACJ,EAAM,SAAS,cAAc,CAAC,gBAEpC,GAAI,EAAK,CAKP,eAAe,EACb,CAAiB,CACjB,CAAqB,EASrB,OAPa,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,CAClC,YAAa,IACb,cAAe,EACf,eAAgB,IAChB,QAAS,CACX,EAGF,CAGA,eAAe,IACb,IAAM,EAAa,SAAS,cAAc,CAAC,cACvC,MACE,EACJ,SAAS,cAAc,CAAC,kBACvB,MACG,EACJ,SAAS,cAAc,CAAC,iBACvB,MACG,EAAY,SAAS,cAAc,CAAC,UAE1C,GAAI,CAAC,EAAW,OAMhB,GAHA,EAAU,WAAW,CAAG,GAGpB,CAAC,EAAW,CACd,EAAU,WAAW,CAAG,uCACxB,MACF,CAEA,GAAI,CAAC,EAAiB,CACpB,EAAU,WAAW,CAAG,iDACxB,MACF,CAEA,IAAM,EAAe,WAAW,GAEhC,GAAI,MAAM,GAAe,CACvB,EAAU,WAAW,CACnB,mDACF,MACF,CAEA,GAAI,CACF,GAAI,CAAC,EAAK,MAEV,CAAA,EAAI,SAAS,CAAG,aAChB,EAAI,YAAY,CAAC,WAAY,IAG7B,IAAM,EAAc,MAAM,EACxB,EACA,GAGF,EAAI,eAAe,CAAC,YACpB,EAAI,SAAS,CAAG,WAGhB,IAAM,EAAgB,IAAM,EAGxB,EAAW,CAAC,6BAAmB,EAAE;AAAY,CAAC,CAGlD,GAFY,CAAC,qCAA2B,EAAE;AAC7B;AAAA,wCAAkC,EAAE,EAAY,OAAO,CAAC,GACxD;AAAA,kBAAkB,EAAE,EAAa,OAAO,CAAC,GAAG;AAAW;AAAE,CAFT,CAIzD,EAAe,EACjB,GACE,2EAEF,GACE,6DAGJ,EAAU,WAAW,CAAG,CAC1B,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,GACd,EAAU,WAAW,CAAG,yCAC1B,CACF,CA1FA,EAAI,gBAAgB,CAAC,QAAS,EA2FhC","sources":["<anon>","src/renderer.ts"],"sourcesContent":["const w = window;\nconst btn = document.getElementById('calculateBtn');\nif (btn) {\n    // Evento de clique no botão \"Calcular\"\n    btn.addEventListener('click', calculateAverageRate);\n    // Exemplo de função (fake) para obter taxa média do BCB\n    async function fetchAverageRateFromBCB(startDate, financingCode) {\n        const data = await w.fetchBCB.fetch({\n            codSegmento: '1',\n            codModalidade: financingCode,\n            tipoModalidade: 'D',\n            periodo: startDate\n        });\n        return data;\n    }\n    // Função principal de cálculo\n    async function calculateAverageRate() {\n        const startDate = document.getElementById('startDate')?.value;\n        const financingCode = document.getElementById('financingType')?.value;\n        const contractRateStr = document.getElementById('contractRate')?.value;\n        const resultDiv = document.getElementById('result');\n        if (!resultDiv) return;\n        // Limpa resultado a cada novo cálculo\n        resultDiv.textContent = '';\n        // Verificações básicas\n        if (!startDate) {\n            resultDiv.textContent = 'Por favor, selecione a data inicial.';\n            return;\n        }\n        if (!contractRateStr) {\n            resultDiv.textContent = 'Por favor, insira a taxa de juros do contrato.';\n            return;\n        }\n        const contractRate = parseFloat(contractRateStr);\n        if (isNaN(contractRate)) {\n            resultDiv.textContent = \"Taxa de juros inv\\xe1lida. Digite um n\\xfamero v\\xe1lido.\";\n            return;\n        }\n        try {\n            if (!btn) return;\n            btn.innerText = 'Carregando';\n            btn.setAttribute('disabled', '');\n            // 1) Buscar a taxa média no período (simulada)\n            const averageRate = await fetchAverageRateFromBCB(startDate, financingCode);\n            btn.removeAttribute('disabled');\n            btn.innerText = 'Calcular';\n            // 2) Calcular se a taxa do contrato está 50% acima da média\n            const limiarAbusivo = 1.5 * averageRate;\n            // Montando mensagem de resultado\n            let mensagem = `\\u{2022} Per\\xedodo inicial: ${startDate}\\n`;\n            mensagem += `\\u{2022} C\\xf3digo do Financiamento: ${financingCode}\\n\\n`;\n            mensagem += `Taxa m\\xe9dia do per\\xedodo (simulada): ${averageRate.toFixed(2)}% ao m\\xeas.\n`;\n            mensagem += `Taxa do contrato: ${contractRate.toFixed(2)}% ao m\\xeas.\n\n`;\n            if (contractRate > limiarAbusivo) mensagem += \"Resultado: A taxa do contrato est\\xe1 mais de 50% acima da m\\xe9dia (ABUSIVA).\";\n            else mensagem += \"Resultado: A taxa do contrato N\\xc3O est\\xe1 50% acima da m\\xe9dia.\";\n            resultDiv.textContent = mensagem;\n        } catch (error) {\n            console.error(error);\n            resultDiv.textContent = 'Ocorreu um erro ao buscar dados do BCB.';\n        }\n    }\n}\n\n//# sourceMappingURL=index.bdf67e95.js.map\n","interface TWindow extends Window {\n  [key: string]: any;\n  versions: {\n    [key: string]: () => string;\n  };\n}\n\nconst w = window as unknown as TWindow;\nconst btn = document.getElementById('calculateBtn');\n\nif (btn) {\n  // Evento de clique no botão \"Calcular\"\n  btn.addEventListener('click', calculateAverageRate);\n\n  // Exemplo de função (fake) para obter taxa média do BCB\n  async function fetchAverageRateFromBCB(\n    startDate: string,\n    financingCode: string\n  ) {\n    const data = await w.fetchBCB.fetch({\n      codSegmento: '1',\n      codModalidade: financingCode,\n      tipoModalidade: 'D',\n      periodo: startDate,\n    });\n\n    return data;\n  }\n\n  // Função principal de cálculo\n  async function calculateAverageRate() {\n    const startDate = (document.getElementById('startDate') as HTMLInputElement)\n      ?.value;\n    const financingCode = (\n      document.getElementById('financingType') as HTMLInputElement\n    )?.value;\n    const contractRateStr = (\n      document.getElementById('contractRate') as HTMLInputElement\n    )?.value;\n    const resultDiv = document.getElementById('result');\n\n    if (!resultDiv) return;\n\n    // Limpa resultado a cada novo cálculo\n    resultDiv.textContent = '';\n\n    // Verificações básicas\n    if (!startDate) {\n      resultDiv.textContent = 'Por favor, selecione a data inicial.';\n      return;\n    }\n\n    if (!contractRateStr) {\n      resultDiv.textContent = 'Por favor, insira a taxa de juros do contrato.';\n      return;\n    }\n\n    const contractRate = parseFloat(contractRateStr);\n\n    if (isNaN(contractRate)) {\n      resultDiv.textContent =\n        'Taxa de juros inválida. Digite um número válido.';\n      return;\n    }\n\n    try {\n      if (!btn) return;\n\n      btn.innerText = 'Carregando';\n      btn.setAttribute('disabled', '');\n\n      // 1) Buscar a taxa média no período (simulada)\n      const averageRate = await fetchAverageRateFromBCB(\n        startDate,\n        financingCode\n      );\n\n      btn.removeAttribute('disabled');\n      btn.innerText = 'Calcular';\n\n      // 2) Calcular se a taxa do contrato está 50% acima da média\n      const limiarAbusivo = 1.5 * averageRate;\n\n      // Montando mensagem de resultado\n      let mensagem = `• Período inicial: ${startDate}\\n`;\n      mensagem += `• Código do Financiamento: ${financingCode}\\n\\n`;\n      mensagem += `Taxa média do período (simulada): ${averageRate.toFixed(2)}% ao mês.\\n`;\n      mensagem += `Taxa do contrato: ${contractRate.toFixed(2)}% ao mês.\\n\\n`;\n\n      if (contractRate > limiarAbusivo) {\n        mensagem +=\n          'Resultado: A taxa do contrato está mais de 50% acima da média (ABUSIVA).';\n      } else {\n        mensagem +=\n          'Resultado: A taxa do contrato NÃO está 50% acima da média.';\n      }\n\n      resultDiv.textContent = mensagem;\n    } catch (error) {\n      console.error(error);\n      resultDiv.textContent = 'Ocorreu um erro ao buscar dados do BCB.';\n    }\n  }\n}\n"],"names":["w","window","btn","document","getElementById","fetchAverageRateFromBCB","startDate","financingCode","fetchBCB","fetch","codSegmento","codModalidade","tipoModalidade","periodo","calculateAverageRate","value","contractRateStr","resultDiv","textContent","contractRate","parseFloat","isNaN","innerText","setAttribute","averageRate","removeAttribute","limiarAbusivo","mensagem","toFixed","error","console","addEventListener"],"version":3,"file":"index.bdf67e95.js.map"}