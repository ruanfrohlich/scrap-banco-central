{"mappings":"A,I,E,Q,YCGA,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,EAAc,iBAAiB,CAAC,WAAY,CAC1C,KAAM,IAAM,QAAQ,QAAQ,CAAC,IAAI,CACjC,OAAQ,IAAM,QAAQ,QAAQ,CAAC,MAAM,CACrC,SAAU,IAAM,QAAQ,QAAQ,CAAC,QAAQ,AAC3C,GAEA,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,EAAc,iBAAiB,CAAC,WAAY,CAC1C,MAAO,AAAC,GAA6B,AAAA,CAAA,EAAA,EAAA,WAAU,AAAV,EAAY,MAAM,CAAC,WAAY,EACtE","sources":["<anon>","src/preload.ts"],"sourcesContent":["var $4cMlM$electron = require(\"electron\");\n\n\n(0, $4cMlM$electron.contextBridge).exposeInMainWorld('versions', {\n    node: ()=>process.versions.node,\n    chrome: ()=>process.versions.chrome,\n    electron: ()=>process.versions.electron\n});\n(0, $4cMlM$electron.contextBridge).exposeInMainWorld('fetchBCB', {\n    fetch: (data)=>(0, $4cMlM$electron.ipcRenderer).invoke('fetchBCB', data)\n});\n\n\n//# sourceMappingURL=preload.js.map\n","import { contextBridge, ipcRenderer } from 'electron';\nimport { IFetchBCBArguments } from './types';\n\ncontextBridge.exposeInMainWorld('versions', {\n  node: () => process.versions.node,\n  chrome: () => process.versions.chrome,\n  electron: () => process.versions.electron,\n});\n\ncontextBridge.exposeInMainWorld('fetchBCB', {\n  fetch: (data: IFetchBCBArguments) => ipcRenderer.invoke('fetchBCB', data),\n});\n"],"names":["$4cMlM$electron","require","contextBridge","exposeInMainWorld","node","process","versions","chrome","electron","fetch","data","ipcRenderer","invoke"],"version":3,"file":"preload.js.map","sourceRoot":"../"}