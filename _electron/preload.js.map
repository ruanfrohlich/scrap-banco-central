{"mappings":"A,I,E,Q,YCGA,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,EAAc,iBAAiB,CAAC,cAAe,CAC7C,SAAU,AAAC,GAA6B,AAAA,CAAA,EAAA,EAAA,WAAU,AAAV,EAAY,MAAM,CAAC,WAAY,GACvE,gBAAiB,AAAC,GACT,AAAA,CAAA,EAAA,EAAA,WAAU,AAAV,EAAY,EAAE,CAAC,iBAAkB,CAAC,EAAQ,IAAU,EAAS,IAEtE,aAAc,AAAC,GAAkB,AAAA,CAAA,EAAA,EAAA,WAAU,AAAV,EAAY,IAAI,CAAC,gBAAiB,EACrE","sources":["<anon>","src/preload.ts"],"sourcesContent":["var $4cMlM$electron = require(\"electron\");\n\n\n(0, $4cMlM$electron.contextBridge).exposeInMainWorld('electronAPI', {\n    fetchBCB: (data)=>(0, $4cMlM$electron.ipcRenderer).invoke('fetchBCB', data),\n    onUpdateCounter: (callback)=>{\n        return (0, $4cMlM$electron.ipcRenderer).on('update-counter', (_event, value)=>callback(value));\n    },\n    counterValue: (value)=>(0, $4cMlM$electron.ipcRenderer).send('counter-value', value)\n});\n\n\n//# sourceMappingURL=preload.js.map\n","import { contextBridge, ipcRenderer } from 'electron';\nimport { IFetchBCBArguments } from './types';\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  fetchBCB: (data: IFetchBCBArguments) => ipcRenderer.invoke('fetchBCB', data),\n  onUpdateCounter: (callback: (value: number) => void) => {\n    return ipcRenderer.on('update-counter', (_event, value) => callback(value));\n  },\n  counterValue: (value: number) => ipcRenderer.send('counter-value', value),\n});\n"],"names":["$4cMlM$electron","require","contextBridge","exposeInMainWorld","fetchBCB","data","ipcRenderer","invoke","onUpdateCounter","callback","on","_event","value","counterValue","send"],"version":3,"file":"preload.js.map","sourceRoot":"../"}